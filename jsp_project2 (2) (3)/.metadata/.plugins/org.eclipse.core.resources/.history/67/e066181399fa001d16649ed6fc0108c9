package controller;

import java.io.IOException;
import java.util.List;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import domain.BoardVO;
import domain.PagingVO;
import handler.PagingHandler;
import service.BoardService;
import service.BoardServiceImpl;


@WebServlet("/brd/*")
public class BoardController extends HttpServlet {
	private static final long serialVersionUID = 1L;
	private static final Logger log = LoggerFactory.getLogger(BoardController.class);
	private RequestDispatcher rdp;  //웹의 목적지 주소로 객체를 전달해주는 객체
	private String destPage; //목적지 주소를 저장해주는 변수
	private int isOk;  //db의 insert, update, delete의 결과를 받는 변수
	private BoardService bsv;  //interface

    
    public BoardController() {
     bsv = new BoardServiceImpl(); //interface 구현체
    }

	
	protected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// 캐릭터 인코딩 설정, 컨텐츠 타입 설정
		request.setCharacterEncoding("utf-8");
		response.setCharacterEncoding("utf-8");
		response.setContentType("text/html; charset=utf-8");
		
		String uri = request.getRequestURI();
		log.info(">>> uri > "+uri);
		String path = uri.substring(uri.lastIndexOf("/")+1);
		log.info(">>> path > "+path);
		
		switch(path) {
		case "register":
			destPage="/board/register.jsp";
			break;
			
		case "insert":
			try {
				String title = request.getParameter("title");
				String writer = request.getParameter("writer");
				String content = request.getParameter("content");
				
				BoardVO bvo = new BoardVO(title, writer, content);
				//insert, update, delete => 리턴타입 isOk
				//select => BoardVO의 객체값 (여러개 리턴이면 List)
				isOk = bsv.insert(bvo);
				log.info(">>> insert > "+(isOk>0? "OK":"FAIL"));
			} catch (Exception e) {
				// TODO: handle exception
				e.printStackTrace();
			}
			destPage="list";
			break;
			
		case "list":
			try {
				List<BoardVO> list = bsv.getList();
				request.setAttribute("list", list);
				log.info(">>> list Ok");
			} catch (Exception e) {
				// TODO: handle exception
				e.printStackTrace();
			}
			destPage="/board/list.jsp";
			break;
		case "pagesub":
			try {
				int pageNo = Integer.parseInt(request.getParameter("pageNo"));
				
			} catch (Exception e) {
				// TODO: handle exception
				e.printStackTrace();
			}
			break;
		case "page":
			try {
				int pageNo = 1;
				int qty = 10;
				String type ="";
				String keyword="";
				if(request.getParameter("type") != null) {
					type = request.getParameter("type");
					keyword = request.getParameter("keyword");					
					log.info(">>> type > "+type + ">>> keyword > "+keyword);
				}
				if(request.getParameter("pageNo") != null) {
					pageNo = Integer.parseInt(request.getParameter("pageNo"));
					qty = Integer.parseInt(request.getParameter("qty"));
				}
				PagingVO pgvo = new PagingVO(pageNo,qty);
				pgvo.setType(type);
				pgvo.setKeyword(keyword);
				log.info(">>>pgvo > "+pgvo);
				//전체 페이지 개수
				int totCount = bsv.getTotal(pgvo);
				log.info("전체 페이지 개수 : "+totCount);
				//limit를 이용한 select List를 호출 (startPage, qty
				// 한페이지에 나와야 하는 리스트
				List<BoardVO> list = bsv.getPageList(pgvo); 
				log.info(">>>> list : "+list.size());
				PagingHandler ph = new PagingHandler(pgvo, totCount);
				request.setAttribute("pgh", ph);
				request.setAttribute("list", list);
				log.info("pageList 성공~!!");
				destPage="/board/list.jsp";
			} catch (Exception e) {
				// TODO: handle exception
				e.printStackTrace();
			}
			break;
			
		case "detail":
			try {
				int bno = Integer.parseInt(request.getParameter("bno"));
				BoardVO bvo = bsv.getDetail(bno);
				request.setAttribute("bvo", bvo);
			} catch (Exception e) {
				// TODO: handle exception
				e.printStackTrace();
			}
			destPage="/board/detail.jsp";
			break;
		case "modify":
			try {
				int bno = Integer.parseInt(request.getParameter("bno"));
				BoardVO bvo = bsv.getDetail(bno);
				request.setAttribute("bvo", bvo);
			} catch (Exception e) {
				// TODO: handle exception
				e.printStackTrace();
			}
			destPage="/board/modify.jsp";
			break;
		case "edit":
			try {
				String title = request.getParameter("title");
				String content = request.getParameter("content");
				int bno = Integer.parseInt(request.getParameter("bno"));
				BoardVO bvo = new BoardVO(bno, title, content);
				isOk = bsv.update(bvo);
				log.info(">>> insert > "+(isOk>0? "OK":"FAIL"));
			} catch (Exception e) {
				// TODO: handle exception
				e.printStackTrace();
			}
//			destPage="/board/list.jsp";  //빈 페이지만 띄워줌
			destPage="list";  //컨트롤러 list에서 db 검색 후 객체 가지고 list.jsp로 이동
			break;
		case "delete":
			try {
				int bno = Integer.parseInt(request.getParameter("bno"));
				isOk = bsv.delete(bno);
			} catch (Exception e) {
				// TODO: handle exception
				e.printStackTrace();
			}
			destPage="list";
			break;
		
		}
		rdp=request.getRequestDispatcher(destPage);
		rdp.forward(request, response);
	}

	
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		service(request, response);
	}

	
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		service(request, response);
	}

}
